/**
 \file $$ROOTFILENAME$$.cpp
 \brief Implements ...

 \author $$EXTENSIONAUTHORS$$ <$$EXTENSIONEMAILS$$>
 */

#include <openfluid/builderext/$$EXTENSIONTYPE$$.hpp>
#include <gtkmm/main.h>
#include <gtkmm/assistant.h>
#include <gtkmm/label.h>

DECLARE_EXTENSION_HOOKS

DEFINE_EXTENSION_INFOS("$$EXTENSIONID$$",
    "$$EXTENSIONSHORTNAME$$",
    "$$EXTENSIONNAME$$",
    "$$EXTENSIONDESC$$",
    "$$EXTENSIONAUTHORS$$",
    "$$EXTENSIONEMAILS$$",
    openfluid::builderext::PluggableBuilderExtension::$$EXTENSIONTYPE$$)

DEFINE_EXTENSION_DEFAULT_CONFIG($$PREFSDEFAULTS$$)


// =====================================================================
// =====================================================================


class AutoGeneratedAssistant : public Gtk::Assistant
{
  private:
    
    bool m_Applied;

    // =====================================================================
    // =====================================================================

    void enableApplied()
    {
      m_Applied = true;
      hide();
    }
    
  public:
    
    AutoGeneratedAssistant()
    : m_Applied(false)
    {
      set_title("Auto-generated input data importer assistant");
      set_default_size(640,480);
      set_modal(true);

      Gtk::Label* Label1 = Gtk::manage(new Gtk::Label("Intro page"));
      append_page(*Label1);
      set_page_title(*Label1, "Page 1/3");
      set_page_type(*Label1, Gtk::ASSISTANT_PAGE_INTRO);
      set_page_complete(*Label1, true);
      
      Gtk::Label* Label2 = Gtk::manage(new Gtk::Label("Intermediate page"));
      append_page(*Label2);
      set_page_title(*Label2, "Page 2/3");
      set_page_complete(*Label2, true);
      
      Gtk::Label* Label3 = Gtk::manage(new Gtk::Label("Confirm page"));
      append_page(*Label3);
      set_page_title(*Label3, "Page 3/3");
      set_page_type(*Label3, Gtk::ASSISTANT_PAGE_CONFIRM);
      set_page_complete(*Label3, true);      
      
      signal_cancel().connect(sigc::mem_fun(*this, &Gtk::Assistant::hide));
      signal_close().connect(sigc::mem_fun(*this, &Gtk::Assistant::hide));
      signal_apply().connect(sigc::mem_fun(*this, &AutoGeneratedAssistant::enableApplied));

      show_all_children();
    }

    // =====================================================================
    // =====================================================================
    
    ~AutoGeneratedAssistant()
    {
    
    }

    // =====================================================================
    // =====================================================================
    
    bool getApplied()
    {
      return m_Applied;
    }
  
};


// =====================================================================
// =====================================================================


class $$CLASSNAME$$: public openfluid::builderext::$$EXTENSIONTYPE$$
{
  private:
  
  public:

    $$CLASSNAME$$()
    {
        
    }

    // =====================================================================
    // =====================================================================

    ~$$CLASSNAME$$()
    {

    }

    // =====================================================================
    // =====================================================================

    bool isReadyForShowtime() const 
    { 
      return true; 
    }

    // =====================================================================
    // =====================================================================

    Gtk::Widget* getExtensionAsWidget()
    {
      return (Gtk::Widget*) 0;
    }

    // =====================================================================
    // =====================================================================

    void show()
    {
      AutoGeneratedAssistant AutoGenAssist;

      Gtk::Main::run(AutoGenAssist);

      if (AutoGenAssist.getApplied())
        signal_ChangedOccurs().emit();
    }
    
};


// =====================================================================
// =====================================================================
$$PREFSPANELCLASSDEF$$

DEFINE_EXTENSION_HOOKS($$EXTENSIONHOOKS$$)


